{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialAuthState = {\n  token: '',\n  user: [],\n  isLoadingLogin: false,\n  isLoadingRegister: false\n};\n/**\n * @param {userName, password, rePassword, email} payload\n */\nexport const fetchRegister = createAsyncThunk('auth/fetchRegister', async payload => {\n  await fetch('http://localhost:9090/user/register', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'userName': payload.userName,\n      'password': payload.password,\n      'rePassword': payload.rePassword,\n      'email': payload.email\n    })\n  });\n});\nexport const fetchLogin = createAsyncThunk('auth/fetchLogin', async payload => {\n  try {\n    const response = await fetch('http://localhost:9090/user/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'userName': payload.userName,\n        'password': payload.password\n      })\n    }).then(res => res.json());\n    return response;\n  } catch (err) {}\n  return null;\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {},\n  extraReducers: build => {\n    build.addCase(fetchRegister.pending, state => {\n      state.isLoadingRegister = true;\n    });\n    build.addCase(fetchRegister.fulfilled, state => {\n      state.isLoadingRegister = false;\n    });\n    build.addCase(fetchLogin.pending, state => {\n      state.isLoadingLogin = true;\n    });\n    build.addCase(fetchLogin.fulfilled, (state, action) => {\n      console.log('fullfil...: ', action.payload);\n      state.isLoadingLogin = false;\n      if (action.payload.code === 200) {\n        state.token = action.payload.data;\n      } else alert(action.payload.message);\n    });\n    build.addCase(fetchLogin.rejected, (state, action) => {\n      console.log(action.payload);\n    });\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialAuthState","token","user","isLoadingLogin","isLoadingRegister","fetchRegister","payload","fetch","method","headers","body","JSON","stringify","userName","password","rePassword","email","fetchLogin","response","then","res","json","err","authSlice","name","initialState","reducers","extraReducers","build","addCase","pending","state","fulfilled","action","console","log","code","data","alert","message","rejected","reducer"],"sources":["/Users/berkhayta/Desktop/React-Social-Media/react-social-java14/src/store/feature/authSlice.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { IRegister } from \"../../components/models/IRegister\";\nimport { ILogin } from \"../../components/models/ILogin\";\nimport { IResponse } from \"../../components/models/IResponse\";\n\nconst initialAuthState={\n    token: '',\n    user: [],\n    isLoadingLogin: false,\n    isLoadingRegister: false\n}\n/**\n * @param {userName, password, rePassword, email} payload\n */\nexport const fetchRegister = createAsyncThunk(\n    'auth/fetchRegister',\n    async(payload: IRegister)=>{\n      await fetch('http://localhost:9090/user/register',{\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                'userName': payload.userName,\n                'password': payload.password,\n                'rePassword': payload.rePassword,\n                'email': payload.email\n            })\n        })\n    }\n);\nexport const fetchLogin = createAsyncThunk(\n    'auth/fetchLogin',\n    async(payload: ILogin)=>{\n        try{\n        const response =  await fetch('http://localhost:9090/user/login',{\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        'userName': payload.userName,\n                        'password': payload.password\n                    })\n                }).then(res=> res.json())\n                return response;\n        }catch(err){\n            \n        }\n       return null;\n    }\n);\n\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState: initialAuthState,\n    reducers:{},\n    extraReducers: (build)=>{\n        build.addCase(fetchRegister.pending,(state)=>{\n            state.isLoadingRegister = true;\n        });\n        build.addCase(fetchRegister.fulfilled,(state)=>{\n            state.isLoadingRegister = false;\n        });\n        build.addCase(fetchLogin.pending,(state)=>{\n            state.isLoadingLogin = true;\n        })\n        build.addCase(fetchLogin.fulfilled,(state,action: PayloadAction<IResponse>)=>{\n            console.log('fullfil...: ',action.payload)\n            state.isLoadingLogin = false;\n            if(action.payload.code === 200){\n                state.token = action.payload.data;\n            }else\n                alert(action.payload.message)\n            \n        });\n        build.addCase(fetchLogin.rejected,(state,action)=>{\n            console.log(action.payload);\n        });\n    }\n});\n\nexport default authSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}