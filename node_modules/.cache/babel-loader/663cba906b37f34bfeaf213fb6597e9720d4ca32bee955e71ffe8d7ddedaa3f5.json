{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport swal from 'sweetalert';\nconst initialAuthState = {\n  token: '',\n  user: [],\n  isLoadingLogin: false,\n  isLoadingRegister: false,\n  isAuth: false\n};\n/**\n * @param {userName, password, rePassword, email} payload\n */\nexport const fetchRegister = createAsyncThunk('auth/fetchRegister', async payload => {\n  const response = await fetch('http://localhost:9090/user/register', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'userName': payload.userName,\n      'password': payload.password,\n      'rePassword': payload.rePassword,\n      'email': payload.email\n    })\n  }).then(data => data.json());\n  return response;\n});\nexport const fetchLogin = createAsyncThunk('auth/fetchLogin', async payload => {\n  try {\n    const response = await fetch('http://localhost:9090/user/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'userName': payload.userName,\n        'password': payload.password\n      })\n    }).then(data => data.json());\n    return response;\n  } catch (err) {\n    console.log('hata...: ', err);\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {},\n  extraReducers: build => {\n    build.addCase(fetchRegister.pending, state => {\n      state.isLoadingRegister = true;\n    });\n    build.addCase(fetchRegister.fulfilled, state => {\n      state.isLoadingRegister = false;\n    });\n    build.addCase(fetchLogin.pending, state => {\n      state.isLoadingLogin = true;\n    });\n    build.addCase(fetchLogin.fulfilled, (state, action) => {\n      state.isLoadingLogin = false;\n      if (action.payload.code === 200) {\n        state.token = action.payload.data;\n        state.isAuth = true;\n      } else swal('Hata!', action.payload.message, 'error');\n    });\n    build.addCase(fetchLogin.rejected, (state, action) => {\n      console.log(action.payload);\n    });\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","swal","initialAuthState","token","user","isLoadingLogin","isLoadingRegister","isAuth","fetchRegister","payload","response","fetch","method","headers","body","JSON","stringify","userName","password","rePassword","email","then","data","json","fetchLogin","err","console","log","authSlice","name","initialState","reducers","extraReducers","build","addCase","pending","state","fulfilled","action","code","message","rejected","reducer"],"sources":["/Users/berkhayta/Desktop/React-Social-Media/react-social-java14/src/store/feature/authSlice.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { IRegister } from \"../../components/models/IRegister\";\nimport { ILogin } from \"../../components/models/ILogin\";\nimport { IResponse } from \"../../components/models/IResponse\";\nimport swal from 'sweetalert';\nconst initialAuthState={\n    token: '',\n    user: [],\n    isLoadingLogin: false,\n    isLoadingRegister: false,\n    isAuth: false\n}\n/**\n * @param {userName, password, rePassword, email} payload\n */\nexport const fetchRegister = createAsyncThunk(\n    'auth/fetchRegister',\n    async(payload: IRegister)=>{\n        const response =  await fetch('http://localhost:9090/user/register',{\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                'userName': payload.userName,\n                'password': payload.password,\n                'rePassword': payload.rePassword,\n                'email': payload.email\n            })\n        }).then(data => data.json())\n        return response;\n    }\n);\n\nexport const fetchLogin = createAsyncThunk(\n    'auth/fetchLogin',\n    async(payload: ILogin)=>{\n        try{\n        const response =  await fetch('http://localhost:9090/user/login',{\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        'userName': payload.userName,\n                        'password': payload.password\n                    })\n                }).then(data=> data.json())\n            return response;            \n             \n        }catch(err){\n            console.log('hata...: ', err);            \n        }\n      \n    }\n);\n\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState: initialAuthState,\n    reducers:{},\n    extraReducers: (build)=>{\n        build.addCase(fetchRegister.pending,(state)=>{\n            state.isLoadingRegister = true;\n        });\n        build.addCase(fetchRegister.fulfilled,(state)=>{\n            state.isLoadingRegister = false;\n        });\n        build.addCase(fetchLogin.pending,(state)=>{\n            state.isLoadingLogin = true;\n        })\n        build.addCase(fetchLogin.fulfilled,(state,action: PayloadAction<IResponse>)=>{            \n            state.isLoadingLogin = false;\n            if(action.payload.code === 200){\n                state.token = action.payload.data;\n                state.isAuth = true;\n            }else\n                swal('Hata!',action.payload.message,'error');\n            \n        });\n        build.addCase(fetchLogin.rejected,(state,action)=>{\n            console.log(action.payload);\n        });\n    }\n});\n\nexport default authSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}